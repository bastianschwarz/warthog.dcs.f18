/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42mk1):
 * <bastian@codename-php.de> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return Bastian Schwarz.
 *
 * If you don't want to buy me a beer, consider buying one for Poul-Henning Kamp
 * for creating this licence.
 * ----------------------------------------------------------------------------
 */
 
/*
 * This is the main file of the profile. Run this in your T.A.R.G.E.T. software.
 * The profile is intended to be compatible with the Thrustmaster HOTAS Cougar
 * and the default button mapping in DCS World 2.5 and up
 */
 
include "target.tmh" //inlcude TM default stuff
include "humanReadableUSBCodes.ttm" //include USB mapping to make the code easier to read
include "usbToDcsF18.ttm" // include usb to dcs actions mapping to make the code EVEN EASIER to read

int main() {
  if(Init(&EventHandle)) return 1; // declare the event handler, return on error
	  	
  excludeDevices();
  initLEDs();
    
  //stick
  setupStickAxis();
  setupTrigger();
  setupMSLStep();
  setupWeaponRelease();
  setupPinky();
  setupPaddle();
  setupTrimHat();
  setupTMS();
  setupDMS();
  
  //throttle
  setupThrottleAxis();
  setupChinaHat();
}

//event handler
int EventHandle(int type, alias o, int x) {
  DefaultMapping(&o, x);
}

/*
 * Excludes the devices we don't want to handle. We only want to handle the warthog throttle and stick.
 *
 * Everything else should be handled by DX
 */
int excludeDevices() {
  Configure(&LMFD,MODE_EXCLUDED); 
  Configure(&RMFD,MODE_EXCLUDED);
  Configure(&HCougar,MODE_EXCLUDED);
  Configure(&T16000,MODE_EXCLUDED);
  Configure(&T16000L,MODE_EXCLUDED);
  Configure(&TFRPRudder,MODE_EXCLUDED);
}

/*
 * Initializes the LEDs by setting the backlight intensitiy to a sensible level and turning off all status LEDs so they can later be set to the desired state
 * by various actions
 */
int initLEDs() {
  ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, 214)); //set Throttle backlight power to 5/6
  ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED0)); //set backlight OFF
  ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1)); //set LED 1 OFF
  ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); //set LED 2 OFF
  ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); //set LED 3 OFF
  ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); //set LED 4 OFF
  ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); //set LED 5 OFF
}

/*
 * Sets up the Stick axis as a basic SCurve with a small deadzone
 *
 * @param int deadzone Since the stick is very sensitve there is input by just putting the hands on the stick. A small deadzone helps with unwanted input
 * @param int curve Set a positive curve to make the axis a bit less responsive since the default values seemed a bit violent at times even at small movements
 */
int setupStickAxis(int deadzone = 3, int curve = 3) {
  MapAxis(&Joystick, JOYX, DX_X_AXIS); 
  SetSCurve(&Joystick, JOYX, 0, deadzone, 0, curve, 0);
 
  MapAxis(&Joystick, JOYY, DX_Y_AXIS); 
  SetSCurve(&Joystick, JOYY, 0, deadzone, 0, curve, 0);
}

/*
 * Sets up the trigger (the big red one at the front) with all related actions and states
 */
int setupTrigger() {
  MapKey(&Joystick, TG2, GUN_TRIGGER);
}

/*
 * Sets up what would be the MSL Step button (right side of the Stick) on the F16
 *
 * Acts as CAGE-UNCAGE here
 */
int setupMSLStep() {
  MapKey(&Joystick, S1, CAGE_UNCAGE);
}

/*
 * Sets up the wepaons release (the small red one on the top) with all related actions and states
 */
int setupWeaponRelease() {
  MapKey(&Joystick, S2, WEAPON_RELEASE);
}

/*
 * Sets up the pinky button (base of the stick) to  Undesignate - Nose Wheel Steer Switch
 */
int setupPinky() {
  MapKey(&Joystick, S3, UNDESIGNATE_NWS);
}

/*
 * Sets up the paddle as Autopilot - Nosewheel Steering Disengage
 */
int setupPaddle() {
  MapKey(&Joystick, S4, AUTOPILOT_NWS_DISENGAGE);
}

/*
 * Sets up the trim hat (the big white-ish one on the top) for trimming the aircraft
 */
int setupTrimHat() {
  MapKey(&Joystick, H1U, TRIM_PUSH_DESCEND);
  MapKey(&Joystick, H1D, TRIM_PULL_CLIMB);
  MapKey(&Joystick, H1L, TRIM_LEFT_WING_DOWN);
  MapKey(&Joystick, H1R, TRIM_RIGHT_WING_DOWN);
}

/*
 * Sets up what would be the target management switch in the F16 that acts as AA Weapon selector here.
 *
 * In the F18 the weapons selector is at the side of the stick (where the F16 CMS is) but since the Warthog
 * also has this as a button and we only have 4 AA weapons to choose a button would be wasted
 */
int setupTMS() {
  MapKey(&Joystick, H2U, AA_SELECT_ARMAAM);
  MapKey(&Joystick, H2D, AA_SELECT_GUN);
  MapKey(&Joystick, H2L, AA_SELECT_SIDEWINDER);
  MapKey(&Joystick, H2R, AA_SELECT_SPARROW);
}

/*
 * Sets up the display managment switch (the black flat one below the trim hat), acts as sensor control switch in the F18
 *
 * This manages the active display where the TDC slew works and also controls the ACM modes
 */
int setupDMS() {
  MapKey(&Joystick, H3U, SCS_FWD);
  MapKey(&Joystick, H3D, SCS_AFT);
  MapKey(&Joystick, H3L, SCS_LEFT);
  MapKey(&Joystick, H3R, SCS_RIGHT);
}

/*
 * Sets up the throttle axis along with the idle-off key events and LED states
 *
 * @param int physicalAfterburnerDetend The percentage of throttle where the physical afterburner detend ist - the default warthog detend is at 80%
 * @param int inGameAfterburnerDetend The percentage of throttle where the sim plane activates the afterburner. With the FA-18C module in DCS this is at about 92%.
 */
int setupThrottleAxis(int physicalAfterburnerDetend = 80, int inGameAfterburnerDetend = 92) {
  // curve
  MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS);
  SetJCurve(&Throttle, THR_LEFT, physicalAfterburnerDetend, inGameAfterburnerDetend); // set the curve to align the AB detend with the AB in game
  MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS); 
  SetJCurve(&Throttle, THR_RIGHT, physicalAfterburnerDetend, inGameAfterburnerDetend);
  
  // Idle states
  MapKey(&Throttle, IDLELON, CHAIN(PULSE + THROTTLE_LEFT_OFF, D(), LED(&Throttle, LED_ONOFF, LED_CURRENT - LED0)));
  MapKey(&Throttle, IDLERON, CHAIN(PULSE + THROTTLE_RIGHT_OFF, D(), LED(&Throttle, LED_ONOFF, LED_CURRENT - LED0)));
  MapKey(&Throttle, IDLELOFF, CHAIN(PULSE + THROTTLE_LEFT_IDLE, D(), LED(&Throttle, LED_ONOFF, LED_CURRENT + LED0)));
  MapKey(&Throttle, IDLEROFF, CHAIN(PULSE + THROTTLE_RIGHT_IDLE, D(), LED(&Throttle, LED_ONOFF, LED_CURRENT + LED0)));
}

/*
 * Sets up the china hat (the red 2 direction switch at the side of the throttle) for countermeasures(ALE-47)
 */
int setupChinaHat() {
  MapKey(&Throttle, CHF, DISPENSE_SWITCH_FORWARD_CHAFF);
  MapKey(&Throttle, CHB, DISPENSE_SWITCH_AFT_FLARE);
}